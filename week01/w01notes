Basic Git commands
- "git init" initializes a brand new Git repository and begins tracking an existing directory . It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control. 
- "git clone" creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches.

- "git commit" saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit.

- "git status" shows the status of changes as untracked, modified, or staged.

- "git branch" shows the branches being worked on locally.

- "git merge" merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.

- "git pull" updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.

- "git push" updates the remote repository with any commits made locally to a branch.

link:  full reference guide to Git commands.

example of contribution to existing repository:
# download a repository on GitHub to our machine
# Replace `owner/repo` with the owner and name of the repository to clone
git clone https://github.com/owner/repo.git

# change into the `repo` directory
cd repo

# create a new branch to store any new changes
git branch my-branch

# switch to that branch (line of development)
git checkout my-branch

# make changes, for example, edit `file1.md` and `file2.md` using the text editor

# stage the changed files
git add file1.md file2.md

# take a snapshot of the staging area (anything that's been added)
git commit -m "my snapshot"

# push changes to github
git push --set-upstream origin my-branch

example of starting a new repository:
# create a new directory, and initialize it with git-specific functions
git init my-repo

# change into the `my-repo` directory
cd my-repo

# create the first file in the project
touch README.md

# git isn't aware of the file, stage it
git add README.md

# take a snapshot of the staging area
git commit -m "add README to initial commit"

# provide the path for the repository you created on github
git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY-NAME.git

# push changes to github
git push --set-upstream origin main

example of contributing to existing branch on GitHub:
# change into the `repo` directory
cd repo

# update all remote tracking branches, and the currently checked out branch
git pull

# change into the existing branch called `feature-a`
git checkout feature-a

# make changes, for example, edit `file1.md` using the text editor

# stage the changed file
git add file1.md

# take a snapshot of the staging area
git commit -m "edit file1"

# push changes to github
git push

- The two primary ways people collaborate on GitHub: 
-Shared repository.
-Fork and Pull.

With a shared repository, individuals and teams are explicitly designated as contributors with read, write, or administrator access. This simple permission structure, combined with features like protected branches, helps teams progress quickly when they adopt GitHub.

For an open source project, or for projects to which anyone can contribute, managing individual permissions can be challenging, but a fork and pull model allows anyone who can view the project to contribute. A fork is a copy of a project under a developer's personal account. Every developer has full control of their fork and is free to implement a fix or a new feature. Work completed in forks is either kept separate, or is surfaced back to the original project via a pull request. There, maintainers can review the suggested changes before they're merged. 

- Can change directories by using the cd command followed by the name of the directory to change to. ex: cd pictures moves into a folder beneath or in the current folder named "pictures". A single period . refers to the current directory, and two periods.. refers to the parent directory. Thus , typing cd .. will change to the parent folder of the one you were in. 

-There are two ways to refer to a location in the file system, an absolute, or full path to the location, or a relative path that describes the location in relation to your current location.

For example, a file might have an absolute path of /home/brigham/pictures/family.jpg and you could always use that full path to refer to it, but if you were already in the /home/brigham directory, you could refer to it as pictures/family.jpg (or an equivalent way that uses the the single period, current directory notation: ./pictures/family.jpg )
l

-Making Changes
Creating a repository and cloning it to your computer only needs to be done once at the beginning of the project, so those commands are not used as frequently. Once you have everything set up, you will begin your regular process of making changes and pushing them to GitHub.

Any changes need to go through the following steps:

Make your changes
Add them to a staging area where they get ready for the next commit.
Commit all the changes that have been staged.
This stores the changes in the repo on your computer, but they are not at GitHub yet.
Push your repo to GitHub.
This sends your changes and makes sure the two repos (on your computer and at GitHub) are in sync.
If you were working with another person, Git would make you "pull" from GitHub at the same time to make sure you get a copy of any changes that GitHub has that your computer does not have yet.

-To add a file to the staging area so that it can be part of the next commit, you use the command git add followed by the name of the file that has changed or been created. For example:


git add myFile.txt

-If you are running the git command from a different folder, it is important that you specify the full name of the file, using either an absolute or a relative path. For example:


git add csharp-prep/Prep1/Program.cs

-You can also specify a directory, which will add anything that has changed in that directory (or any subdirectories beneath it). Remembering that the single period . represents the current directory, you can use a shorthand syntax to add the current directory and everything beneath it by typing:


git add .

-When you are ready to commit all of the files that have been staged, you use the git commit command followed by a commit message. For example:


git commit -m "Fixed problems where nothing was displayed on the screen.

-If you forget to include a commit message, git will take you to a text editor to type one in. On most systems this will take you to a default editor called vim. This may or may not be your favorite editor. If it is not, and you simply want to exit, press the Escape key a couple of times and then type :q! (the : tells it you are entering a command, the q says you want to quit, and the ! says you are not worried about saving changes).

This will help you exit the editor. You can then run the commit command again, this time with the -m for your message.

-Once you have committed your changes to your local repository, you can push them to GitHub using the git push command. For example:


git push origin main

-COMAND FOR ADDING COMMIT AND PUSHING FROM COMMAND LINE

git add . 
git command -m "message"
git push

--C# (c-sharp)--

In C#, when a variable is declared, its data type must be specified. 

ou declare a variable, by specifying the type. Later, when you use the variable, you do not need to specify the type again.

example: 

int x; 
x = 5;
Console.Writeline(x);

or

int x = 5;
Console.Writeline(x);

common built in variable types:
int - integers (whole numbers, positive and negative)

string - a sequence of characters, including lettters, numbers, or symbols.

float - floating point numbers. 

double - double precision floating point numbers just like a float, exvept it takes up twince as much memory, so it can hold larger numbers or numbers with more decimal places.

bool - boolean variables (true or false)

--input and output--
In C# to print something as output to the console, you use Console.WriteLine("") function.

Python
print("Hello World!")

C#
Console.WriteLine("Hello World!");

Console.WriteLine("") will print a full line including the new line. 
If you don't want a new line at the end use Console.Write("")

Console.Write("There will not be a newline after this.");

-To get input from user Console.ReadLine() function. 

Console.Write("What is your favorite color? ");
string color = Console.ReadLine();

- Curly braces {} define the body of an if statement or a function. in C# you indent the body, nut this is only a convention, the mechanism that defines the body is the curly braces {}.

- In C# you don't use a colon : to start the body and when using if statements, you must always put the condition in parentheses ().

C#
if (x > y)
{
  Console.WriteLine("greater");
}


Python
if x > y:
  print("greater")

-Statements end in semicolons ;. Typically one statement  will be one line, however, soometimes you may have a long statement that extends on multiple lines until the semicolon ; is reached.

-String interpolation. if you woould like to use a variable inside a string, start the string with a dollar sign $ in the same way that python, you start a format with f.

Python
school = "BYU-Idaho"
print(f"I am studying at {school}.")

C#
string school = "BYU-Idaho";
Console.WriteLine($"I am studying at {school}.");

